---
import '../tailwind.main.css';
import '../themes/light.css';
import '../themes/dark.css';
import { pwaInfo } from 'virtual:pwa-info';
import { pwaAssetsHead } from 'virtual:pwa-assets/head';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import PostHogInit from '../components/analytics/PostHogInit.astro';
import CookieBanner from '../components/analytics/CookieBanner.astro';

interface Props {
	title: string;
	showActions: boolean;
	fullwidth: boolean;
	smallFooter?: boolean;
}

const { title, showActions, fullwidth, smallFooter } = Astro.props;
---

<!doctype html>
<html lang="en" data-theme="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1, viewport-fit=cover" />
        <meta name="description" content="Simulator, Assembler and Debugger for Intel 8085 microprocessor." />
        <meta name="author" content="Debjit Biswas, www.debjitbiswas.com" />
        <meta name="keywords" content="8085, assembler, simulator, IDE, Intel">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		{ pwaAssetsHead.themeColor && <meta name="theme-color" content={pwaAssetsHead.themeColor.content} /> }
        { pwaAssetsHead.links.map(link => (
            <link {...link} />
        )) }
        <script src="/src/pwa.js"></script>
        { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" media="(prefers-color-scheme: dark)"/>
		<script is:inline>
          (function () {
              // On page load or when changing themes, best to add inline in `head` to avoid FOUC
              const theme = localStorage.theme;
              if (theme === 'system') {
                  // Detect system preference (dark or light)
                  const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
                  document.documentElement.classList.toggle('dark', isDarkMode);
              } else {
                  // Apply the manually selected theme ('light' or 'dark')
                  document.documentElement.classList.toggle('dark', theme === 'dark');
              }
          }());
        </script>
        <PostHogInit />
    </head>
	<body class={`bg-page-background text-primary-foreground min-h-screen`}>
	    <main class={`${!fullwidth ? "max-w-4xl mx-auto" : ""}`}>
			<Header showActions={showActions} fullwidth={fullwidth} />
            <div>
                <slot />
            </div>
    	</main>
        <Footer small={smallFooter} />
        <CookieBanner />
	</body>
</html>
<style is:global>
</style>

<script>
import Alpine from 'alpinejs';

document.addEventListener('alpine:init', () => {
  Alpine.store('theme', {
      value: 'system',

      init() {
          this.value = localStorage.getItem('theme') || 'system';
          // On page load, apply the appropriate theme
          this.applyTheme();

          // Watch for changes in system preference if the theme is 'system'
          this.watchSystemPreference();
      },

      switch(theme) {
          this.value = theme;  // Update theme value
          this.applyTheme();   // Apply the selected theme
          localStorage.setItem('theme', theme);
      },

      applyTheme() {
          if (this.value === 'system') {
              // Detect system preference (dark or light)
              const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
              // document.documentElement.classList.toggle('dark', isDarkMode);
              document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
          } else {
              // Apply the manually selected theme ('light' or 'dark')
              // document.documentElement.classList.toggle('dark', this.value === 'dark');
              document.documentElement.setAttribute('data-theme', this.value === 'dark' ? 'dark' : 'light');
          }
      },

      watchSystemPreference() {
          // Watch for system preference changes (e.g., user switches from dark to light mode in OS)
          window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
              if (this.value === 'system') {
                  // document.documentElement.classList.toggle('dark', e.matches);
                  document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
              }
          });
      }
  });
});
</script>
