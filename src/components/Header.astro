---
import HandHoldingHeartIcon from '../icons/hand-holding-heart.svg?raw';
import SponsorIcon from '../icons/sponsor.svg?raw';
import LockIcon from '../icons/lock.svg?raw';
import MenuIcon from '../icons/menu.svg?raw';
import RegularDockLeftIcon from '../icons/regular-dock-left.svg?raw';
import SolidDockLeftIcon from '../icons/solid-dock-left.svg?raw';
import RegularDockRightIcon from '../icons/regular-dock-right.svg?raw';
import SolidDockRightIcon from '../icons/solid-dock-right.svg?raw';
import LogoWithBackground from '../icons/logo-with-green-background.svg?raw';
import YoutubeIcon from '../icons/youtube.svg?raw';
import ThemeSwitcher from './ThemeSwitcher.astro';
import {Actions} from './Actions.jsx';
import {FileActions} from './FileActions.jsx';
import {supabase} from '../lib/supabase.js';

interface Props {
    showActions: boolean;
    fullwidth: boolean;
    title?: string;
}

const {showActions, fullwidth, title} = Astro.props;

// Get user session if logged in
const {data: {session}} = await supabase.auth.getSession();
const user = session?.user;
const isLoggedIn = !!user;
const avatarUrl = user?.user_metadata?.avatar_url || '/default-avatar.png'; // Default avatar if none exists
---
<header class="w-full py-0 md:py-4 justify-start md:justify-between items-center h-auto md:h-16 md:flex">
    <div class="flex items-center gap-2 w-full">
        <!-- <a href="/" class="w-[25vw] md:min-w-[295px] flex items-center gap-2 pl-4">
            <span class="w-6 h-6 text-terminal"><Fragment set:html={LogoWithBackground} /></span>
            <span class="text-gray-800 dark:text-gray-200">Sim8085</span>
        </a> -->
        <div class="md:block">
            <a
                href="/"
                class="inline-flex items-center gap-2 ml-1 pl-1 lg:ml-2 lg:pl-2 pr-2 py-2 rounded group hover:bg-terminal-200 relative"
            >
                <span class="w-6 h-6 text-terminal z-10 relative">
                    <Fragment set:html={LogoWithBackground} />
                </span>
                <span
                    class="absolute left-8 opacity-0 transform translate-x-2 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-0 group-hover:static text-gray-800"
                >
                    Sim8085
                </span>
            </a>
        </div>
        {title ? (
            <div class="pl-4 flex-grow w-full">Tutorial - {title}</div>
        ) : null}
        {showActions ? <div class="pl-4 hidden">
            <FileActions client:idle/>
        </div> : null}
        {showActions ? (
            <div class="
                md:pl-0 flex flex-grow flex-shrink md:min-w-[300px] md:gap-2 md:justify-end
                fixed bottom-0 left-0 z-50 bg-page-background w-full py-2 px-4
                pb-10 md:pb-2 text-xl md:text-base
                md:static
            ">
                <button type="button" id="left-panel-btn" class="md:hidden">
                    <span class="regular-icon"><Fragment set:html={RegularDockLeftIcon} /></span>
                    <span class="solid-icon"><Fragment set:html={SolidDockLeftIcon} /></span>
                </button>
                <div class="flex-grow hidden md:block"></div>
                {showActions ?
                    <Actions client:idle/> : null}
                <button type="button" id="right-panel-btn" class="md:hidden">
                    <span class="regular-icon"><Fragment set:html={RegularDockRightIcon} /></span>
                    <span class="solid-icon"><Fragment set:html={SolidDockRightIcon} /></span>
                </button>
            </div>
        ) : null}
        <div class={`${fullwidth ? "w-[30vw]" : ""} flex-grow flex-shrink-0 flex items-start pr-2 md:pr-4`}>
            <!-- <div class="flex flex-grow items-center gap-2 space-x-2"> -->
            <!-- <div class="pl-2 border-r border-r-gray-500 dark:border-r-gray-600 h-4"></div> -->
            <div class="flex-grow"></div>
            <div class="flex items-center gap-2">
                <ThemeSwitcher/>
                <link href="https://fonts.googleapis.com/css?family=Cookie&amp;display=swap" rel="stylesheet">
                <!-- Profile Icon and Logout Button -->
                <div x-data="userProfile" class="relative hidden md:block">
                    <template x-if="isLoggedIn">
                        <div class="relative">
                            <button @click="toggleMenu" class="flex items-center focus:outline-none">
                                <img :src="avatarUrl || '/default-avatar.png'" alt="User Avatar"
                                     class="w-8 h-8 rounded-full">
                            </button>
                            <div x-show="menuOpen" @click.away="menuOpen = false"
                                 class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-700 rounded-md shadow-lg overflow-hidden z-10">
                                <button @click="logout"
                                        class="block w-full px-4 py-2 text-sm text-left text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600">
                                    Logout
                                </button>
                            </div>
                        </div>
                    </template>
                    <template x-if="!isLoggedIn">
                        <a href="/login"
                           class="inline-block text-secondary-foreground px-4 py-1 box-border rounded-md border border-inactive-border bg-secondary-background hover:bg-main-background">
                            Login
                        </a>
                    </template>
                </div>
                <a href="https://youtu.be/7l-zS9RmAnM"
                    class="bmc-btn"
                    target="_blank"
                >
                    <span class="text-red-foreground">
                        <Fragment set:html={YoutubeIcon}/>
                    </span> <span class="hidden md:inline bmc-btn-text">Demo</span>
                </a>
                <link href="https://fonts.googleapis.com/css?family=Inter&amp;display=swap" rel="stylesheet">
                <a
                    class="bmc-btn"
                    href="/donate"
                >
                    <span class="text-red-foreground">
                        <Fragment set:html={SponsorIcon}/>
                    </span> <span class="hidden md:inline bmc-btn-text">Support</span>
                </a>
                <button
                    x-data="unlockPlusButton"
                    type="button"
                    class="hidden h-8 py-4 px-4 flex items-center gap-2 rounded text-sm bg-transparent hover:bg-secondary-background box-border border border-main-border hover:border-yellow-foreground text-yellow-foreground"
                    @click="showPlusDialog"
                    x-show="tier === 'FREE'"
                >
                    <span>
                        <Fragment set:html={LockIcon}/>
                    </span>
                    <span class="hidden md:inline bmc-btn-text">Unlock Plus</span>
                </button>
                <div x-data="mobileMenu" class="relative block md:hidden">
                    <div class="relative">
                        <button @click="menuOpen = !menuOpen" class="flex items-center focus:outline-none py-1">
                            <span
                                class="w-8 h-8 rounded-full text-xl content-center text-inactive-foreground hover:text-active-foreground flex items-center justify-end">
                                <Fragment set:html={MenuIcon}/>
                            </span>
                        </button>
                        <div x-show="menuOpen" @click.away="menuOpen = false"
                             class="absolute right-0 mt-2 w-48 bg-secondary-background rounded-md shadow-lg overflow-hidden z-10">
                            <template x-if="isLoggedIn">
                                <button @click="logout"
                                        class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                    Logout
                                </button>
                            </template>
                            <template x-if="!isLoggedIn">
                                <a href="/login"
                                   class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                    Login
                                </a>
                            </template>
                            <a href="/donate"
                               class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                Support
                            </a>
                            <a href="/docs/en"
                               target="_blank"
                               class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                Documentation
                            </a>
                            <a href="/changelog"
                               target="_blank"
                               class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                Changelog
                            </a>
                            <a href="https://github.com/debjitbis08/sim8085"
                               target="_blank"
                               class="block w-full px-4 py-2 text-sm text-left text-active-foreground hover:bg-active-background">
                                GitHub
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<style>
    .bmc-btn {
        @apply h-8 py-4 px-4 hidden md:flex items-center gap-2 rounded-lg text-sm bg-transparent box-border text-secondary-foreground hover:text-active-foreground border border-inactive-border hover:border-secondary-border;
        /* font-family: 'Inter', sans-serif !important; */
        font-weight: bold;
        position: relative;
        z-index: 1;
        transition: transform 0.2s ease, box-shadow 0.5s ease;
        /* box-shadow: 0 0 10px rgba(0, 204, 255, 0.2); */
        /* animation: subtle-glow 3s infinite; */
    }

    /* Glow animation */
    @keyframes subtle-glow {
        0% {
            box-shadow: 0 0 8px rgba(0, 204, 255, 0.2), 0 0 15px rgba(0, 204, 255, 0.15);
        }
        50% {
            box-shadow: 0 0 12px rgba(0, 204, 255, 0.3), 0 0 20px rgba(0, 204, 255, 0.2);
        }
        100% {
            box-shadow: 0 0 8px rgba(0, 204, 255, 0.2), 0 0 15px rgba(0, 204, 255, 0.15);
        }
    }

    /* Hover effect */
    .bmc-btn:hover {
        /* transform: scale(1.05); */
        animation: none;
        box-shadow: none;
    }

    .regular-icon {
        display: block;
    }

    .solid-icon {
        display: none;
    }

    .solid .solid-icon {
        display: block
    }

    .solid .regular-icon {
        display: none;
    }
</style>
<script>
    import Alpine from 'alpinejs';
    import {supabase} from '../lib/supabase.js';

    document.addEventListener('alpine:init', () => {
        Alpine.data('userProfile', () => ({
            isLoggedIn: false,
            user: null,
            avatarUrl: '/default-avatar.png',
            menuOpen: false,

            async init() {
                const {data: {session}} = await supabase.auth.getSession();
                this.user = session?.user;
                this.isLoggedIn = !!this.user;
                this.avatarUrl = this.user?.user_metadata?.avatar_url || '/default-avatar.png'; // Default avatar if none exists
            },

            toggleMenu() {
                this.menuOpen = !this.menuOpen;
            },

            async logout() {
                await supabase.auth.signOut();
                localStorage.removeItem("activeFile");
                window.location.reload(); // Refresh the page after logout
            },

        }));

        Alpine.data("mobileMenu", () => ({
            isLoggedIn: false,
            menuOpen: false,

            async init() {
                const {data: {session}} = await supabase.auth.getSession();
                const user = session?.user;
                this.isLoggedIn = !!user;
            },

            async logout() {
                await supabase.auth.signOut();
                localStorage.removeItem("activeFile");
                window.location.reload(); // Refresh the page after logout
            },
        }));

        Alpine.data("unlockPlusButton", () => ({
            tier: "FREE",
            async init() {
                const data = await this.fetchUserId();

                this.tier = data ? data.tier : "FREE";
            },

            async fetchUserId() {
                const {data: {user}, error} = await supabase.auth.getUser();

                if (error && error.name === 'AuthSessionMissingError') {
                    return null;
                }

                if (error || user == null) throw new Error("Unable to fetch user ID");

                const { data: tier, error: tierFetchError } = await supabase
                    .from("customers")
                    .select("subscription_tier")
                    .eq("id", user?.id)
                    .single();

                if (tierFetchError) throw new Error("Unable to fetch user's subscription tier.");

                return { id: user?.id, tier: tier.subscription_tier };
            },

            showPlusDialog() {
                window.dispatchEvent(
                    new CustomEvent("showPlusDialog", {
                        detail: {},
                    })
                );
            }
        }));
    });

    document.getElementById("left-panel-btn")?.addEventListener("click", function () {
        window.dispatchEvent(
            new CustomEvent("showLeftPanel", {
                detail: {},
            })
        );
        if (this.classList.contains("solid")) {
            this.classList.remove("solid");
        } else {
            this.classList.add("solid");
        }
    });

    document.getElementById("right-panel-btn")?.addEventListener("click", function () {
        window.dispatchEvent(
            new CustomEvent("showRightPanel", {
                detail: {},
            })
        );
        if (this.classList.contains("solid")) {
            this.classList.remove("solid");
        } else {
            this.classList.add("solid");
        }
    });
</script>


